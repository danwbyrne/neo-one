// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genCommonBrowserFiles Token 1`] = `
Object {
  "angular": Object {
    "js": "// tslint:disable
/* eslint-disable */
import { Injectable } from '@angular/core';
import { createClient, createDeveloperClients } from './client';

import { createTokenSmartContract } from './Token/contract';
import { createICOSmartContract } from './ICO/contract';

@Injectable({
  providedIn: 'root',
})
export class ContractsService {
  constructor() {
    this.setHost();
  }

  setHost(host) {
    this.client = createClient(host);
    this.developerClients = createDeveloperClients(host);
    this.token = createTokenSmartContract(this.client);
    this.ico = createICOSmartContract(this.client);
  }
}
",
    "ts": "// tslint:disable
/* eslint-disable */
import { Client, DeveloperClients, UserAccountProviders } from '@neo-one/client';
import { Contracts } from './types';
import { DefaultUserAccountProviders } from './client';

export class ContractsService<TUserAccountProviders extends UserAccountProviders<any> = DefaultUserAccountProviders> {
  public readonly client: Client<TUserAccountProviders>;
  public readonly developerClients: DeveloperClients;
  public readonly token: Contracts['token'];
  public readonly ico: Contracts['ico'];
  public setHost(host?: string);
}
",
  },
  "client": Object {
    "js": "// tslint:disable
/* eslint-disable */
import {
  Client,
  DeveloperClient,
  LocalKeyStore,
  LocalMemoryStore,
  LocalUserAccountProvider,
  NEOONEProvider,
  NEOONEDataProvider,
} from '@neo-one/client';
import { getJSONRPCLocalProviderManager } from '@neo-one/local-singleton';

const getDefaultUserAccountProviders = (provider) => ({
  memory: new LocalUserAccountProvider({
    keystore: new LocalKeyStore(new LocalMemoryStore()),
    provider,
  }),
});

const isLocalUserAccountProvider = (userAccountProvider) => userAccountProvider instanceof LocalUserAccountProvider;

export const createClient = (getUserAccountProviders = getDefaultUserAccountProviders) => {
  const providers = [];
  if (process.env.NODE_ENV !== 'production' || process.env.NEO_ONE_DEV === 'true') {
    providers.push(new NEOONEDataProvider({ network: 'local', rpcURL: getJSONRPCLocalProviderManager() }));
  }
  const provider = new NEOONEProvider(providers);
  const userAccountProviders = getUserAccountProviders(provider);
  const localUserAccountProviders = Object.values(userAccountProviders).filter(isLocalUserAccountProvider);
  const localUserAccountProvider = localUserAccountProviders.find(
    (userAccountProvider) => userAccountProvider.keystore instanceof LocalKeyStore,
  );
  if (process.env.NODE_ENV !== 'production' || process.env.NEO_ONE_DEV === 'true') {
    if (localUserAccountProvider !== undefined) {
      const localKeyStore = localUserAccountProvider.keystore;
      if (localKeyStore instanceof LocalKeyStore) {
        Promise.all([
          localKeyStore.addUserAccount({
            network: 'local',
            name: 'master',
            privateKey: 'L4qhHtwbiAMu1nrSmsTP5a3dJbxA3SNS6oheKnKd8E7KTJyCLcUv',
          }),
        ]).catch(() => {
          // do nothing
        });
      }
    }
  }

  return new Client(userAccountProviders);
};

export const createDeveloperClients = () => ({
  local: new DeveloperClient(new NEOONEDataProvider({ network: 'local', rpcURL: getJSONRPCLocalProviderManager() })),
});
",
    "ts": "// tslint:disable
/* eslint-disable */
import {
  DeveloperClients,
  LocalKeyStore,
  LocalUserAccountProvider,
  NEOONEProvider,
  UserAccountProviders,
} from '@neo-one/client';

export interface DefaultUserAccountProviders {
  readonly memory: LocalUserAccountProvider<LocalKeyStore, NEOONEProvider>;
}

export const createClient: <TUserAccountProviders extends UserAccountProviders<any> = DefaultUserAccountProviders>(
  getUserAccountProviders?: (provider: NEOONEProvider) => TUserAccountProviders,
) => Client<
  TUserAccountProviders extends UserAccountProviders<infer TUserAccountProvider> ? TUserAccountProvider : never,
  TUserAccountProviders
>;

export const createDeveloperClients: () => DeveloperClients;
",
  },
  "commonTypes": Object {
    "js": undefined,
    "ts": "// tslint:disable
/* eslint-disable */
import { ICOSmartContract } from './ICO/types';
import { TokenSmartContract } from './Token/types';

export interface Contracts {
  readonly ico: ICOSmartContract;
  readonly token: TokenSmartContract;
}
",
  },
  "generated": Object {
    "js": "// tslint:disable
/* eslint-disable */
export * from './react';
export * from './client';
export * from './Token/contract';
export * from './Token/abi';
export * from './ICO/contract';
export * from './ICO/abi';
",
    "ts": "// tslint:disable
/* eslint-disable */
export * from './types';
export * from './react';
export * from './client';
export * from './Token/contract';
export * from './Token/types';
export * from './Token/abi';
export * from './ICO/contract';
export * from './ICO/types';
export * from './ICO/abi';
",
  },
  "react": Object {
    "js": "// tslint:disable
/* eslint-disable */
import { DeveloperTools } from '@neo-one/client';
import * as React from 'react';
import { createClient, createDeveloperClients } from './client';
import { createTokenSmartContract } from './Token/contract';
import { createICOSmartContract } from './ICO/contract';

const Context = React.createContext(undefined);

export const ContractsProvider = ({
  client: clientIn,
  developerClients: developerClientsIn,
  localClients: localClientsIn,
  host,
  children,
}) => {
  const client = clientIn === undefined ? createClient(host) : clientIn;
  const developerClients = developerClientsIn === undefined ? createDeveloperClients(host) : developerClientsIn;
  DeveloperTools.enable({ client, developerClients });

  return (
    <Context.Provider
      value={{
        client,
        developerClients,
        token: createTokenSmartContract(client),
        ico: createICOSmartContract(client),
      }}
    >
      {children}
    </Context.Provider>
  );
};

export const WithContracts = ({ children }) => <Context.Consumer>{children}</Context.Consumer>;
",
    "ts": "// tslint:disable
/* eslint-disable */
import { Client, DeveloperClient, DeveloperClients } from '@neo-one/client';
import * as React from 'react';
import { Contracts } from './types';

export interface WithClients<TClient extends Client> {
  readonly client: TClient;
  readonly developerClients: DeveloperClients;
  readonly host?: string;
}
export type ContractsWithClients<TClient extends Client> = Contracts & WithClients<TClient>;
export type ContractsProviderProps<TClient extends Client> = Partial<WithClients<TClient>> & {
  readonly children?: React.ReactNode;
};
export const ContractsProvider: <TClient extends Client>({
  client: clientIn,
  developerClients: developerClientsIn,
  host,
  children,
}: ContractsProviderProps<TClient>) => React.ReactElement;

export interface WithContractsProps<TClient extends Client> {
  readonly children: (contracts: ContractsWithClients<TClient>) => React.ReactNode;
}
export const WithContracts: <TClient extends Client>({ children }: WithContractsProps<TClient>) => React.ReactElement;
",
  },
  "sourceMaps": Object {
    "js": "// tslint:disable
/* eslint-disable */
let sourceMapsIn = {};

if (process.env.NODE_ENV !== 'production' || process.env.NEO_ONE_DEV === 'true') {
  sourceMapsIn = {};
}

export const sourceMaps = sourceMapsIn;
",
    "ts": "// tslint:disable
/* eslint-disable */
import { SourceMaps } from '@neo-one/client';

export const sourceMaps: SourceMaps;
",
  },
  "test": Object {
    "js": "// tslint:disable
/* eslint-disable */
import { createWithContracts } from '@neo-one/smart-contract-test-browser';
import * as path from 'path';

export const withContracts = createWithContracts([
  { name: 'Token', filePath: path.resolve(__dirname, '../contracts/Token.ts') },
  { name: 'ICO', filePath: path.resolve(__dirname, '../contracts/ICO.ts') },
]);
",
    "ts": "// tslint:disable
/* eslint-disable */
import { TestOptions, WithContractsOptions } from '@neo-one/smart-contract-test-browser';
import { Contracts } from './types';

export const withContracts: (
  test: (contracts: Contracts & TestOptions) => Promise<void>,
  options?: WithContractsOptions,
) => Promise<void>;
",
  },
  "vue": Object {
    "js": "// tslint:disable
/* eslint-disable */
import { createClient, createDeveloperClients } from './client';

import { createTokenSmartContract } from './Token/contract';
import { createICOSmartContract } from './ICO/contract';

export class ContractsService {
  constructor() {
    this.setHost();
  }

  setHost(host) {
    this.client = createClient(host);
    this.developerClients = createDeveloperClients(host);
    this.token = createTokenSmartContract(this.client);
    this.ico = createICOSmartContract(this.client);
  }
}

export const instance = new ContractsService();
",
    "ts": "// tslint:disable
/* eslint-disable */
import { Client, DeveloperClients, UserAccountProviders } from '@neo-one/client';
import { Contracts } from './types';
import { DefaultUserAccountProviders } from './client';

export class ContractsService<TUserAccountProviders extends UserAccountProviders<any> = DefaultUserAccountProviders> {
  public readonly client: Client<TUserAccountProviders>;
  public readonly developerClients: DeveloperClients;
  public readonly token: Contracts['token'];
  public readonly ico: Contracts['ico'];
  public setHost(host?: string);
}

export const instance: ContractsService;
",
  },
}
`;
